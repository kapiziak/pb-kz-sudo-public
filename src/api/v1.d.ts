/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api-docs/swagger.json": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/": {
    get: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/auth/me": {
    get: {
      responses: {
        /** @description User is logged in */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                user: {
                  /** @example 1 */
                  id: string;
                  /** @example hello@kzakrzewski.pl */
                  email: string;
                  /** @example VISITOR */
                  role: string;
                  profile?: Record<string, never>;
                };
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                user: {
                  /** @example 1 */
                  id: string;
                  /** @example hello@kzakrzewski.pl */
                  email: string;
                  /** @example VISITOR */
                  role: string;
                  profile?: Record<string, never>;
                };
              };
            };
          };
        };
      };
    };
  };
  "/api/auth/login": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            login?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Successful login. */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example some-token */
                token: string;
                user: {
                  /** @example 1 */
                  id: string;
                  /** @example hello@kzakrzewski.pl */
                  email: string;
                  /** @example VISITOR */
                  role: string;
                  profile?: Record<string, never>;
                };
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example some-token */
                token: string;
                user: {
                  /** @example 1 */
                  id: string;
                  /** @example hello@kzakrzewski.pl */
                  email: string;
                  /** @example VISITOR */
                  role: string;
                  profile?: Record<string, never>;
                };
              };
            };
          };
        };
        /** @description Missing credentials. */
        400: {
          content: {
            "application/json": {
              /** @example error */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example AUTH_MISSING_CREDENTIALS */
                code: string;
                /** @example Missing credentials */
                message: string;
              };
            };
            "application/xml": {
              /** @example error */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example AUTH_MISSING_CREDENTIALS */
                code: string;
                /** @example Missing credentials */
                message: string;
              };
            };
          };
        };
        /** @description User not found or credentials are invalid. */
        401: {
          content: {
            "application/json": {
              /** @example error */
              status: string;
              /** @example some-time */
              serverTime: string;
              data: {
                /** @example AUTH_LOGIN_FAILURE */
                code: string;
                /** @example */
                message: string;
              };
            };
            "application/xml": {
              /** @example error */
              status: string;
              /** @example some-time */
              serverTime: string;
              data: {
                /** @example AUTH_LOGIN_FAILURE */
                code: string;
                /** @example */
                message: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/auth/register": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            $login?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/auth/logout": {
    post: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/auth/password/change": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            newPassword?: unknown;
          };
        };
      };
      responses: {
        /** @description Password changed */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                affectedUserId: string;
                /** @example true */
                result: boolean;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                affectedUserId: string;
                /** @example true */
                result: boolean;
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/users/": {
    get: {
      responses: {
        /** @description List of all users */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                users: {
                    /** @example 1 */
                    id: string;
                    /** @example hello@kzakrzewski.pl */
                    email: string;
                    /** @example VISITOR */
                    role: string;
                    profile?: Record<string, never>;
                  }[];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                users: {
                    /** @example 1 */
                    id: string;
                    /** @example hello@kzakrzewski.pl */
                    email: string;
                    /** @example VISITOR */
                    role: string;
                    profile?: Record<string, never>;
                  }[];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/facilities/": {
    get: {
      responses: {
        /** @description List of all facilities */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facilities: components["schemas"]["Facility"][];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facilities: components["schemas"]["Facility"][];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            name?: unknown;
          };
        };
      };
      responses: {
        /** @description Facility successfully added */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facility: components["schemas"]["Facility"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facility: components["schemas"]["Facility"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/facilities/{facilityId}": {
    get: {
      parameters: {
        path: {
          facilityId: string;
        };
      };
      responses: {
        /** @description Single facility */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facility: components["schemas"]["Facility"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facility: components["schemas"]["Facility"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    put: {
      parameters: {
        path: {
          facilityId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            name?: unknown;
          };
        };
      };
      responses: {
        /** @description Facility updated. */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facility: components["schemas"]["Facility"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                facility: components["schemas"]["Facility"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          facilityId: string;
        };
      };
      responses: {
        /** @description Facility removed */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                deletedId: string;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                deletedId: string;
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/facilities/{facilityId}/occupancies": {
    get: {
      parameters: {
        path: {
          facilityId: string;
        };
      };
      responses: {
        /** @description Facility occupied status */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example true */
                isOccupied: string;
                occupancies: components["schemas"]["FacilityOccupancy"][];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example true */
                isOccupied: string;
                occupancies: components["schemas"]["FacilityOccupancy"][];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/facilities/release/{id}": {
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Facility released */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example false */
                isOccupied: string;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example false */
                isOccupied: string;
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/authorizations/": {
    get: {
      responses: {
        /** @description List of all authorizations */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorizations: components["schemas"]["Authorization"][];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorizations: components["schemas"]["Authorization"][];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            expireAt?: unknown;
            /** @example any */
            assignedUsers?: unknown;
            /** @example any */
            scopeFacility?: unknown;
          };
        };
      };
      responses: {
        /** @description Authorization added. */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorization?: components["schemas"]["Authorization"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorization?: components["schemas"]["Authorization"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/authorizations/my-authorizations": {
    get: {
      responses: {
        /** @description List of user authorizations */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorizations: components["schemas"]["Authorization"][];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorizations: components["schemas"]["Authorization"][];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/authorizations/{authorizationId}": {
    get: {
      parameters: {
        path: {
          authorizationId: string;
        };
      };
      responses: {
        /** @description Single authorization. */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorization?: components["schemas"]["Authorization"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorization?: components["schemas"]["Authorization"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    put: {
      parameters: {
        path: {
          authorizationId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            expireAt?: unknown;
            /** @example any */
            assignedUsers?: unknown;
            /** @example any */
            scopeFacility?: unknown;
          };
        };
      };
      responses: {
        /** @description Authorization updated */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorization?: components["schemas"]["Authorization"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorization?: components["schemas"]["Authorization"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          authorizationId: string;
        };
      };
      responses: {
        /** @description Authorization removed. */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                deletedId?: string;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                deletedId?: string;
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/super-id/": {
    get: {
      responses: {
        /** @description Current users superId */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                superId: components["schemas"]["SuperId"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                superId: components["schemas"]["SuperId"];
              };
            };
          };
        };
        /** @description User has no superId */
        400: {
          content: {
            "application/json": {
              /** @example error */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example GET_SUPER_ID_NOT_FOUND */
                code: string;
                /** @example SuperId assigned to your account not found */
                message: string;
              };
            };
            "application/xml": {
              /** @example error */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example GET_SUPER_ID_NOT_FOUND */
                code: string;
                /** @example SuperId assigned to your account not found */
                message: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
    put: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            identityCardId?: unknown;
            /** @example any */
            pin?: unknown;
            /** @example any */
            studentId?: unknown;
          };
        };
      };
      responses: {
        /** @description Updated superId */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                superId: components["schemas"]["SuperId"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                superId: components["schemas"]["SuperId"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": {
            validTo?: number;
            pin?: string;
            studentId?: string;
            identityCardId?: string;
          };
        };
      };
      responses: {
        /** @description Created superId */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                superId: components["schemas"]["SuperId"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                superId: components["schemas"]["SuperId"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/super-id/revoke": {
    post: {
      responses: {
        /** @description Revoked superId */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                revokedId: number;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                revokedId: number;
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/super-id/useSecret": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            secret?: unknown;
          };
        };
      };
      responses: {
        /** @description Challenge created */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example uuidv4 */
                challengeId: string;
                /** @example AAABBBCCC */
                identityCardId: string;
                /** @example AAABBBCCC */
                studentId: string;
                /** @example 1 */
                userId: number;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example uuidv4 */
                challengeId: string;
                /** @example AAABBBCCC */
                identityCardId: string;
                /** @example AAABBBCCC */
                studentId: string;
                /** @example 1 */
                userId: number;
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/super-id/challenge/": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            challengeId?: unknown;
            /** @example any */
            pin?: unknown;
          };
        };
      };
      responses: {
        /** @description Challenge response */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorizations: components["schemas"]["AuthorizationExtendedFacilities"][];
                user: {
                  /** @example 1 */
                  id: string;
                  /** @example hello@kzakrzewski.pl */
                  email: string;
                  /** @example VISITOR */
                  role: string;
                };
                profile?: components["schemas"]["Profile"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                authorizations: components["schemas"]["AuthorizationExtendedFacilities"][];
                user: {
                  /** @example 1 */
                  id: string;
                  /** @example hello@kzakrzewski.pl */
                  email: string;
                  /** @example VISITOR */
                  role: string;
                };
                profile?: components["schemas"]["Profile"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/entry/": {
    get: {
      responses: {
        /** @description List of all entries */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entries: components["schemas"]["Entry"][];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entries: components["schemas"]["Entry"][];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            facilities?: unknown;
            /** @example any */
            occupierId?: unknown;
            /** @example any */
            authorizationId?: unknown;
          };
        };
      };
      responses: {
        /** @description New entry added */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entry: components["schemas"]["Entry"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entry: components["schemas"]["Entry"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/entry/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Entry found */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entry: components["schemas"]["Entry"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entry: components["schemas"]["Entry"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/entry/release/{id}": {
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Entry released */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entry: components["schemas"]["Entry"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                entry: components["schemas"]["Entry"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/statistics/all": {
    get: {
      responses: {
        /** @description All statistics */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                activeAuthorizations: number;
                /** @example 1 */
                todayEntries: number;
                /** @example 1 */
                occupiedFacilities: number;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                activeAuthorizations: number;
                /** @example 1 */
                todayEntries: number;
                /** @example 1 */
                occupiedFacilities: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/profile/": {
    get: {
      responses: {
        /** @description User profile */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    put: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            firstName?: unknown;
            /** @example any */
            surname?: unknown;
            /** @example any */
            description?: unknown;
          };
        };
      };
      responses: {
        /** @description Updated user profile */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example any */
            firstName?: unknown;
            /** @example any */
            surname?: unknown;
            /** @example any */
            description?: unknown;
          };
        };
      };
      responses: {
        /** @description Created user profile */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    delete: {
      responses: {
        /** @description Deleted user profile */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                deletedId: string;
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                /** @example 1 */
                deletedId: string;
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/profile/{userId}": {
    get: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description User profile */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/profile/avatar/": {
    post: {
      responses: {
        /** @description Avatar uploaded */
        200: {
          content: {
            "application/json": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
            "application/xml": {
              /** @example success */
              status: string;
              /** @example 1 */
              serverTime: string;
              data: {
                profile: components["schemas"]["Profile"];
              };
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ApiResponse: {
      /** @enum {string} */
      status: "success" | "error";
      /** @example 1577836800000 */
      serverTime: number;
      data: Record<string, never>;
    };
    ApiError: {
      /** @example error */
      status: string;
      /** @example 1577836800000 */
      serverTime: number;
      data: {
        /** @example string */
        code?: string;
        /** @example string */
        message?: string;
      };
    };
    User: {
      /** @example 1 */
      id: string;
      /** @example hello@kzakrzewski.pl */
      email: string;
      role: components["schemas"]["Role"];
      profile?: components["schemas"]["Profile"];
    };
    Facility: {
      /** @example 1 */
      id: string;
      /** @example Facility name */
      name: string;
      occupancy: components["schemas"]["FacilityOccupancy"][];
    };
    /** @enum {string} */
    Role: "ADMIN" | "USER" | "VISITOR";
    Profile: {
      /** @example 1 */
      id: string;
      /** @example Kacper */
      firstName: string;
      /** @example Zakrzewski */
      surname: string;
      /** @example I'm a programmer */
      description: string;
      /** @example 1 */
      userId: string;
      /** @example https://kzakrzewski.pl/avatar.png */
      avatarUrl?: string;
    };
    Authorization: {
      /** @example 1 */
      id: string;
      scopeFacility: {
          /** @example 1 */
          id: string;
          /** @example Facility name */
          name: string;
        }[];
      assignedUsers: {
          /** @example 1 */
          id: string;
          /** @example hello@kzakrzewski.pl */
          email: string;
        }[];
      /** @example 1577836800000 */
      createdAt: number;
      /** @example 1577836800000 */
      expireAt: number;
      /** @example 1 */
      createdByUserId: string;
      createdBy: {
        /** @example hello@kzakrzewski.pl */
        email: string;
      };
    };
    AuthorizationExtendedFacilities: {
      /** @example 1 */
      id: string;
      scopeFacility: components["schemas"]["Facility"][];
      /**
       * @example [
       *   "1",
       *   "2",
       *   "3"
       * ]
       */
      assignedUsers: string[];
      /** @example 1577836800000 */
      createdAt: number;
      /** @example 1577836800000 */
      expireAt: number;
      /** @example 1 */
      createdByUserId: string;
    };
    SuperId: {
      /** @example 1 */
      id: string;
      /** @example 1234 */
      pin?: string;
      /** @example =SID==my-little-secret */
      secret: string;
      /** @example 1 */
      studentId?: string;
      /** @example 1 */
      identityCardId?: string;
      /** @example 1 */
      userId: string;
      /** @example 1577836800000 */
      validTo: number;
    };
    Challenge: {
      /** @example =SID==my-little-secret */
      challengeId: string;
      /** @example 1577836800000 */
      createdAt: number;
      /** @example 1577836800000 */
      validTo: number;
      /** @example 1 */
      superIdId: string;
    };
    FacilityOccupancy: {
      /** @example 1 */
      id: string;
      /** @example true */
      isOccupied: boolean;
      /** @example 1 */
      facilityId: string;
      facility: components["schemas"]["Facility"];
      /** @example 1577836800000 */
      createdAt: number;
      /** @example 2 */
      relatedEntryId: string;
    };
    Entry: {
      /** @example 1 */
      id: string;
      /** @example 1 */
      authorizationId?: string;
      /** @example 1 */
      occupierId: string;
      /** @example 1 */
      authorizedById: string;
      authorizedBy: {
        /** @example hello@kzakrzewski.pl */
        email: string;
      };
      occupier: {
        /** @example hello@kzakrzewski.pl */
        email: string;
      };
      /** @example 1577836800000 */
      entryAt: number;
      /** @example 1577836800000 */
      releaseAt?: number;
      relatedOccupancy: components["schemas"]["FacilityOccupancy"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
